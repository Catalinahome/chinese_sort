一、问题描述
1.Python内置的sort函数对中文字符排序是按照unicode编码大小进行排序，因此不能直接使用python的sort函数
对中文字符按照拼音或者笔画数进行排序。所以想要实现对中文字符的拼音和笔画数排序的话，需要分别自定义拼音排序算法和笔画数排序算法。

2.python内置的f-string方法可以对字符串进行格式化输出，但由于中文字符和西文字符的输出宽度不统一，中文字符宽度一般为2个西文字符宽度，这样就会导致使用f-string方法对西文字符和中文字符同时进行格式化输出时，输出格式不美观。因此，为了实现同时格式化输出中文和西文字符时保持美观，需要自定义字符串格式化输出函数。

二、资源需求
1.python官方中文文档 --https://docs.python.org/zh-cn/3.9/
2.pandas官方中文文档 --https://pypandas.cn/docs/
3.pycharm软件

三、数据结构
1.dataframe  -- 用于pandas读取csv文件
2.dict(字典) -- 用于存储汉字、拼音、笔画、词频之间的映射关系
3.str(字符串) -- 读取txt文件
4.list(列表) -- 存储csv各列（姓名，成绩，拼音, 笔画等,用自定义排序函数对列表进行排序）

四、程序实现说明
1.创建用于实现排序算法和格式化输出字符串的ChineseSortAndFormat类，__init__函数读取csv文件和txt文件，以构造汉字和拼音、笔画、词频映射关系的字典。其中成绩表中的名字为多个字符串，所以需要for循环遍历名字的每个字符串，通过list.csv构造出的单个汉字与拼音和笔画的字典，对姓名的拼音进行拼接以及对姓名的笔画数进行求和以构造姓名和拼音、笔画数的字典。

2.在类中自定义sort_by_pinyin拼音排序函数，入参为中文字符串构成的列表，思路为将中文字符通过上一步构造的汉字与拼音映射关系字典，将中文字符排序转化为拼音排序，用python内置的列表排序函数sort(key=lambda x: pinyin_dict[x])进行升序排序,其中pinyin_dict的key为中文字符（多个或单个），value为key对应的拼音。

3.在类中自定义sort_by_stroke笔画排序函数，入参为中文字符串构成的列表，思路为将中文字符通过第一步构造的汉字与笔画数映射关系字典，将中文字符排序转化为笔画数排序，用python内置的列表排序函数sort(key=lambda x: stroke_dict[x])进行升序排序,其中stroke_dict的key为中文字符（多个或单个），value为key对应的笔画数。

4.在类中自定义chinese_format格式化输出字符串函数，入参为字符串（包含中文或西文字符），思路为将输出的西文字符宽度转为与中文字符等宽，自定义一个辅助函数is_chinese用于判断字符是否为中文字符，对字符串进行遍历，如果不是中文字符，则输出的字符串宽度加1。函数的出参为'{:^{}}'.format(x, length+length_letter)，其中length为入参字符串的原始长度，length_letter为入参字符串中西文字符的数量。

五、模块使用案例
1.《红楼梦》词频表、字频表按频次、笔画、及拼音排序格式化输出结果：引入collections中的Counter方法，将红楼梦.txt读取为字符串格式，调用Counter(txt)即可生成中文字符与字频的字典，调用list(dict.keys())方法将字典的keys转为列表，即可用自定义的sort_by_pinyin和sort_by_stroke方法进行笔画及拼音排序。

2.成绩表按照成绩、姓名笔画、姓名拼音排序格式化输出结果：将成绩表中的姓名存储为列表，即可用自定义的sort_by_pinyin和sort_by_stroke方法进行笔画及拼音排序。按成绩排序可使用pd.read_csv将成绩表读取为dataframe格式，使用pandas内置的df.sort_values(by=['一', '二', '三', '四'])，即可按成绩进行升序排序。

